# -*- coding: utf-8 -*-
"""Customer Churn Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-oxH7gvaP-5-IvCYsantPoI9fHezIFvX
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/customer_churn_dataset-training-master.csv')

df.head()

df.shape

df.info()

"""**EDA (Exploratory Data Analysis)**"""

df.describe()

fig,axes = plt.subplots(1,2,figsize = (12,5))
df['Age'].plot(kind = 'box',ax= axes[0])
axes[0].set_title('BOX Plot for Age')
df['Age'].plot(kind = 'kde',ax=axes[1])
axes[1].set_title('Kde plot for Age')
plt.tight_layout()
plt.show()

"""* We can observe that the Age lies between the 18 to 60.
* The heighest density of the Age lies in 20 to 50.





"""

fig,axes = plt.subplots(1,2,figsize=(12,5))
df['Tenure'].plot(kind = 'hist',ax=axes[0])
df['Tenure'].plot(kind='kde',ax=axes[1])

plt.figure(figsize=(10,6))
sns.heatmap(df.select_dtypes(include=['float64']).corr(),annot=True)
plt.title('Heat Map for the Correlation of features')
plt.show()

"""

1.   Age, Support Calls and Payment Delay and Last Interaction are the Positive correlated to the Churning one
2.   Total Spend is in the Negative correlated to the churning one

"""

sns.boxplot(df['Last Interaction'])
plt.show()

"""Around two weeks in the Last Interaction for the Most of the Users."""

df['Subscription Type'].value_counts()

df['Contract Length'].value_counts()

df.columns

df_final = df[['Age', 'Gender', 'Usage Frequency',
        'Payment Delay', 'Subscription Type',
       'Contract Length', 'Total Spend', 'Last Interaction', 'Churn']].copy()

df_final.head()

df_final['Gender'] = df_final['Gender'].apply(lambda x:1 if x=='Male' else 0)

df_final['Subscription Type'] = df_final['Subscription Type'].apply(lambda x:0 if x=='Basic' else 1 if x=='Standard' else 2)

df_final['Contract Length'] = df_final['Contract Length'].apply(lambda x:0 if x=='Monthly' else 1 if x=='Quarterly' else 2)

df_final.head()

df_final.dropna(inplace = True)

from sklearn.model_selection import train_test_split

X = df_final[['Age', 'Gender', 'Usage Frequency',
        'Payment Delay', 'Subscription Type',
       'Contract Length', 'Total Spend', 'Last Interaction']].copy()

Y = df_final[['Churn']].copy()

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.2,random_state =42)

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

model.fit(X_train,Y_train)

# Accuracy Metrics

from sklearn.metrics import accuracy_score,confusion_matrix

print(accuracy_score(Y_train,model.predict(X_train)))
print(accuracy_score(Y_test,model.predict(X_test)))

print(confusion_matrix(Y_train,model.predict(X_train)))
print(confusion_matrix(Y_test,model.predict(X_test)))

import pickle
pickle_out = open('churn_classifer.pkl',mode= 'wb')
pickle.dump(model,pickle_out)
pickle_out.close()

